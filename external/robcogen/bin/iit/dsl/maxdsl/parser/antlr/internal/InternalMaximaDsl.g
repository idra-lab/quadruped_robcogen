/*
 * generated by Xtext 2.10.0
 */
grammar InternalMaximaDsl;

options {
	superClass=AbstractInternalAntlrParser;
}

@lexer::header {
package iit.dsl.maxdsl.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package iit.dsl.maxdsl.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import iit.dsl.maxdsl.services.MaximaDslGrammarAccess;

}

@parser::members {

 	private MaximaDslGrammarAccess grammarAccess;

    public InternalMaximaDslParser(TokenStream input, MaximaDslGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }

    @Override
    protected String getFirstRuleName() {
    	return "Model";
   	}

   	@Override
   	protected MaximaDslGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}

}

@rulecatch {
    catch (RecognitionException re) {
        recover(input,re);
        appendSkippedTokens();
    }
}

// Entry rule entryRuleModel
entryRuleModel returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getModelRule()); }
	iv_ruleModel=ruleModel
	{ $current=$iv_ruleModel.current; }
	EOF;

// Rule Model
ruleModel returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getModelAccess().getVarsVariablesListParserRuleCall_0_0());
				}
				lv_vars_0_0=ruleVariablesList
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getModelRule());
					}
					set(
						$current,
						"vars",
						lv_vars_0_0,
						"iit.dsl.maxdsl.MaximaDsl.VariablesList");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getModelAccess().getExpressionsSumParserRuleCall_1_0());
				}
				lv_expressions_1_0=ruleSum
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getModelRule());
					}
					add(
						$current,
						"expressions",
						lv_expressions_1_0,
						"iit.dsl.maxdsl.MaximaDsl.Sum");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_2=';'
		{
			newLeafNode(otherlv_2, grammarAccess.getModelAccess().getSemicolonKeyword_2());
		}
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getModelAccess().getExpressionsSumParserRuleCall_3_0_0());
					}
					lv_expressions_3_0=ruleSum
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getModelRule());
						}
						add(
							$current,
							"expressions",
							lv_expressions_3_0,
							"iit.dsl.maxdsl.MaximaDsl.Sum");
						afterParserOrEnumRuleCall();
					}
				)
			)
			otherlv_4=';'
			{
				newLeafNode(otherlv_4, grammarAccess.getModelAccess().getSemicolonKeyword_3_1());
			}
		)*
	)
;

// Entry rule entryRuleVariablesList
entryRuleVariablesList returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getVariablesListRule()); }
	iv_ruleVariablesList=ruleVariablesList
	{ $current=$iv_ruleVariablesList.current; }
	EOF;

// Rule VariablesList
ruleVariablesList returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='Variables'
		{
			newLeafNode(otherlv_0, grammarAccess.getVariablesListAccess().getVariablesKeyword_0());
		}
		otherlv_1='{'
		{
			newLeafNode(otherlv_1, grammarAccess.getVariablesListAccess().getLeftCurlyBracketKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getVariablesListAccess().getItemsVarParserRuleCall_2_0());
				}
				lv_items_2_0=ruleVar
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getVariablesListRule());
					}
					add(
						$current,
						"items",
						lv_items_2_0,
						"iit.dsl.maxdsl.MaximaDsl.Var");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_3=','
			{
				newLeafNode(otherlv_3, grammarAccess.getVariablesListAccess().getCommaKeyword_3_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getVariablesListAccess().getItemsVarParserRuleCall_3_1_0());
					}
					lv_items_4_0=ruleVar
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getVariablesListRule());
						}
						add(
							$current,
							"items",
							lv_items_4_0,
							"iit.dsl.maxdsl.MaximaDsl.Var");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
		otherlv_5='}'
		{
			newLeafNode(otherlv_5, grammarAccess.getVariablesListAccess().getRightCurlyBracketKeyword_4());
		}
	)
;

// Entry rule entryRuleVar
entryRuleVar returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getVarRule()); }
	iv_ruleVar=ruleVar
	{ $current=$iv_ruleVar.current; }
	EOF;

// Rule Var
ruleVar returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			lv_name_0_0=RULE_ID
			{
				newLeafNode(lv_name_0_0, grammarAccess.getVarAccess().getNameIDTerminalRuleCall_0());
			}
			{
				if ($current==null) {
					$current = createModelElement(grammarAccess.getVarRule());
				}
				setWithLastConsumed(
					$current,
					"name",
					lv_name_0_0,
					"org.eclipse.xtext.common.Terminals.ID");
			}
		)
	)
;

// Entry rule entryRuleSum
entryRuleSum returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSumRule()); }
	iv_ruleSum=ruleSum
	{ $current=$iv_ruleSum.current; }
	EOF;

// Rule Sum
ruleSum returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getSumAccess().getProdParserRuleCall_0());
		}
		this_Prod_0=ruleProd
		{
			$current = $this_Prod_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				{
					$current = forceCreateModelElementAndSet(
						grammarAccess.getSumAccess().getSumLeftAction_1_0(),
						$current);
				}
			)
			(
				(
					(
						lv_sign_2_1='+'
						{
							newLeafNode(lv_sign_2_1, grammarAccess.getSumAccess().getSignPlusSignKeyword_1_1_0_0());
						}
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getSumRule());
							}
							setWithLastConsumed($current, "sign", lv_sign_2_1, null);
						}
						    |
						lv_sign_2_2='-'
						{
							newLeafNode(lv_sign_2_2, grammarAccess.getSumAccess().getSignHyphenMinusKeyword_1_1_0_1());
						}
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getSumRule());
							}
							setWithLastConsumed($current, "sign", lv_sign_2_2, null);
						}
					)
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getSumAccess().getRightProdParserRuleCall_1_2_0());
					}
					lv_right_3_0=ruleProd
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getSumRule());
						}
						set(
							$current,
							"right",
							lv_right_3_0,
							"iit.dsl.maxdsl.MaximaDsl.Prod");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleProd
entryRuleProd returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getProdRule()); }
	iv_ruleProd=ruleProd
	{ $current=$iv_ruleProd.current; }
	EOF;

// Rule Prod
ruleProd returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getProdAccess().getPrimaryParserRuleCall_0());
		}
		this_Primary_0=rulePrimary
		{
			$current = $this_Primary_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				{
					$current = forceCreateModelElementAndSet(
						grammarAccess.getProdAccess().getProdLeftAction_1_0(),
						$current);
				}
			)
			otherlv_2='*'
			{
				newLeafNode(otherlv_2, grammarAccess.getProdAccess().getAsteriskKeyword_1_1());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getProdAccess().getRightPrimaryParserRuleCall_1_2_0());
					}
					lv_right_3_0=rulePrimary
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getProdRule());
						}
						set(
							$current,
							"right",
							lv_right_3_0,
							"iit.dsl.maxdsl.MaximaDsl.Primary");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRulePrimary
entryRulePrimary returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getPrimaryRule()); }
	iv_rulePrimary=rulePrimary
	{ $current=$iv_rulePrimary.current; }
	EOF;

// Rule Primary
rulePrimary returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getPrimaryAccess().getTermLiteralParserRuleCall_0());
		}
		this_TermLiteral_0=ruleTermLiteral
		{
			$current = $this_TermLiteral_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getPrimaryAccess().getSineParserRuleCall_1());
		}
		this_Sine_1=ruleSine
		{
			$current = $this_Sine_1.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getPrimaryAccess().getCosineParserRuleCall_2());
		}
		this_Cosine_2=ruleCosine
		{
			$current = $this_Cosine_2.current;
			afterParserOrEnumRuleCall();
		}
		    |
		(
			otherlv_3='('
			{
				newLeafNode(otherlv_3, grammarAccess.getPrimaryAccess().getLeftParenthesisKeyword_3_0());
			}
			{
				newCompositeNode(grammarAccess.getPrimaryAccess().getSumParserRuleCall_3_1());
			}
			this_Sum_4=ruleSum
			{
				$current = $this_Sum_4.current;
				afterParserOrEnumRuleCall();
			}
			otherlv_5=')'
			{
				newLeafNode(otherlv_5, grammarAccess.getPrimaryAccess().getRightParenthesisKeyword_3_2());
			}
		)
	)
;

// Entry rule entryRuleSine
entryRuleSine returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSineRule()); }
	iv_ruleSine=ruleSine
	{ $current=$iv_ruleSine.current; }
	EOF;

// Rule Sine
ruleSine returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getSineAccess().getSineAction_0(),
					$current);
			}
		)
		(
			(
				lv_minus_1_0='-'
				{
					newLeafNode(lv_minus_1_0, grammarAccess.getSineAccess().getMinusHyphenMinusKeyword_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getSineRule());
					}
					setWithLastConsumed($current, "minus", true, "-");
				}
			)
		)?
		otherlv_2='sin'
		{
			newLeafNode(otherlv_2, grammarAccess.getSineAccess().getSinKeyword_2());
		}
		otherlv_3='('
		{
			newLeafNode(otherlv_3, grammarAccess.getSineAccess().getLeftParenthesisKeyword_3());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getSineAccess().getArgSumParserRuleCall_4_0());
				}
				lv_arg_4_0=ruleSum
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getSineRule());
					}
					set(
						$current,
						"arg",
						lv_arg_4_0,
						"iit.dsl.maxdsl.MaximaDsl.Sum");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_5=')'
		{
			newLeafNode(otherlv_5, grammarAccess.getSineAccess().getRightParenthesisKeyword_5());
		}
	)
;

// Entry rule entryRuleCosine
entryRuleCosine returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getCosineRule()); }
	iv_ruleCosine=ruleCosine
	{ $current=$iv_ruleCosine.current; }
	EOF;

// Rule Cosine
ruleCosine returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getCosineAccess().getCosineAction_0(),
					$current);
			}
		)
		(
			(
				lv_minus_1_0='-'
				{
					newLeafNode(lv_minus_1_0, grammarAccess.getCosineAccess().getMinusHyphenMinusKeyword_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getCosineRule());
					}
					setWithLastConsumed($current, "minus", true, "-");
				}
			)
		)?
		otherlv_2='cos'
		{
			newLeafNode(otherlv_2, grammarAccess.getCosineAccess().getCosKeyword_2());
		}
		otherlv_3='('
		{
			newLeafNode(otherlv_3, grammarAccess.getCosineAccess().getLeftParenthesisKeyword_3());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getCosineAccess().getArgSumParserRuleCall_4_0());
				}
				lv_arg_4_0=ruleSum
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getCosineRule());
					}
					set(
						$current,
						"arg",
						lv_arg_4_0,
						"iit.dsl.maxdsl.MaximaDsl.Sum");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_5=')'
		{
			newLeafNode(otherlv_5, grammarAccess.getCosineAccess().getRightParenthesisKeyword_5());
		}
	)
;

// Entry rule entryRuleTermLiteral
entryRuleTermLiteral returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getTermLiteralRule()); }
	iv_ruleTermLiteral=ruleTermLiteral
	{ $current=$iv_ruleTermLiteral.current; }
	EOF;

// Rule TermLiteral
ruleTermLiteral returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getTermLiteralAccess().getVarLiteralParserRuleCall_0());
		}
		this_VarLiteral_0=ruleVarLiteral
		{
			$current = $this_VarLiteral_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getTermLiteralAccess().getFloatLiteralParserRuleCall_1());
		}
		this_FloatLiteral_1=ruleFloatLiteral
		{
			$current = $this_FloatLiteral_1.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleFloatLiteral
entryRuleFloatLiteral returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getFloatLiteralRule()); }
	iv_ruleFloatLiteral=ruleFloatLiteral
	{ $current=$iv_ruleFloatLiteral.current; }
	EOF;

// Rule FloatLiteral
ruleFloatLiteral returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_minus_0_0='-'
				{
					newLeafNode(lv_minus_0_0, grammarAccess.getFloatLiteralAccess().getMinusHyphenMinusKeyword_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getFloatLiteralRule());
					}
					setWithLastConsumed($current, "minus", true, "-");
				}
			)
		)?
		(
			(
				lv_value_1_0=RULE_FLOAT
				{
					newLeafNode(lv_value_1_0, grammarAccess.getFloatLiteralAccess().getValueFLOATTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getFloatLiteralRule());
					}
					setWithLastConsumed(
						$current,
						"value",
						lv_value_1_0,
						"iit.dsl.maxdsl.MaximaDsl.FLOAT");
				}
			)
		)
	)
;

// Entry rule entryRuleVarLiteral
entryRuleVarLiteral returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getVarLiteralRule()); }
	iv_ruleVarLiteral=ruleVarLiteral
	{ $current=$iv_ruleVarLiteral.current; }
	EOF;

// Rule VarLiteral
ruleVarLiteral returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_minus_0_0='-'
				{
					newLeafNode(lv_minus_0_0, grammarAccess.getVarLiteralAccess().getMinusHyphenMinusKeyword_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getVarLiteralRule());
					}
					setWithLastConsumed($current, "minus", true, "-");
				}
			)
		)?
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getVarLiteralRule());
					}
				}
				otherlv_1=RULE_ID
				{
					newLeafNode(otherlv_1, grammarAccess.getVarLiteralAccess().getValueVarCrossReference_1_0());
				}
			)
		)
	)
;

RULE_FLOAT : ('0'..'9')+ ('.' ('0'..'9')+)? ('E' ('+'|'-') ('0'..'9')+)?;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
